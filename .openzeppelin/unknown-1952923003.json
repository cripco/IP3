{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x9936846EA7549acfB16461d609f31116802fBfcF",
    "txHash": "0xfef90ac63460315eb4befbbf87f82fec31cd8998304249bd4b859227303c2631"
  },
  "proxies": [
    {
      "address": "0x1F10a0adfb626eAB4085E910252fE90C90278bf4",
      "txHash": "0x286191c6f6e8e40dce9d9dee9ee74fef7bd3bf7bba6c05cf190a5c7fc9b48cbf",
      "kind": "transparent"
    },
    {
      "address": "0xfBEFC5BcF027c8e83D6A4a1eeE4AE61a9c24a123",
      "txHash": "0xde56e864bb59c012f97127c0ef335afb3eb3346eafc8eff44c889f9cfbf5cc6d",
      "kind": "transparent"
    },
    {
      "address": "0x75CdF8bc86aB3912B95508D2ae13C5B499Ea5D3b",
      "txHash": "0xe433b4c4401f6193892db8e20bc68332ea547139fc8153c810e9cdbce8dddc33",
      "kind": "transparent"
    }
  ],
  "impls": {
    "de0d5ee4a67e30f71fcfc505250a927146ec2fb21cee0096345b7b5ec1765bf7": {
      "address": "0xDCFd8FEABFe2c9E5C0F88677C937cb736E58ce8c",
      "txHash": "0x0f84357bfead73f2af8656906ff9d35409004147ba266b573eb97cb5ca74d9e8",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:247"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "154",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "155",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:394"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "201",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "202",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\cryptography\\draft-EIP712Upgradeable.sol:120"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "253",
            "type": "t_mapping(t_address,t_struct(Counter)1786_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "254",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\draft-ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "_totalReserved",
            "offset": 0,
            "slot": "304",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Reservable",
            "src": "contracts\\libs\\Reservable.sol:28"
          },
          {
            "label": "_reservation",
            "offset": 0,
            "slot": "305",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)3140_storage))",
            "contract": "Reservable",
            "src": "contracts\\libs\\Reservable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "306",
            "type": "t_array(t_uint256)50_storage",
            "contract": "Reservable",
            "src": "contracts\\libs\\Reservable.sol:140"
          },
          {
            "label": "_nonceUsed",
            "offset": 0,
            "slot": "356",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_enum(EthlessTxnType)2809,t_bool)))",
            "contract": "Ethless",
            "src": "contracts\\libs\\Ethless.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)50_storage",
            "contract": "Ethless",
            "src": "contracts\\libs\\Ethless.sol:120"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "407",
            "type": "t_array(t_uint256)50_storage",
            "contract": "IP3Token",
            "src": "contracts\\IP3Token.sol:46"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_enum(EthlessTxnType)2809": {
            "label": "enum Ethless.EthlessTxnType",
            "members": [
              "NONE",
              "BURN",
              "MINT",
              "TRANSFER",
              "RESERVE"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(ReservationStatus)3126": {
            "label": "enum Reservable.ReservationStatus",
            "members": [
              "Draft",
              "Active",
              "Reclaimed",
              "Completed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_enum(EthlessTxnType)2809,t_bool)))": {
            "label": "mapping(address => mapping(uint256 => mapping(enum Ethless.EthlessTxnType => bool)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Reservation)3140_storage))": {
            "label": "mapping(address => mapping(uint256 => struct Reservable.Reservation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)1786_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(EthlessTxnType)2809,t_bool)": {
            "label": "mapping(enum Ethless.EthlessTxnType => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_enum(EthlessTxnType)2809,t_bool))": {
            "label": "mapping(uint256 => mapping(enum Ethless.EthlessTxnType => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Reservation)3140_storage)": {
            "label": "mapping(uint256 => struct Reservable.Reservation)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)1786_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Reservation)3140_storage": {
            "label": "struct Reservable.Reservation",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "executor",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "expiryBlockNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(ReservationStatus)3126",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
